var	 (*  RESERVED_VAR *)
	t, n, q, l, r, g, i: Longint;	 (*  IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER COLON IDENTIFIER SEMI_COLON *)
	a, b, c: array of Longint;	 (*  IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER COLON RESERVED_ARRAY RESERVED_OF IDENTIFIER SEMI_COLON *)
 	 (*  *)
function gcd_recursive(u, v: longint): longint;	 (*  RESERVED_FUNCTION IDENTIFIER LPAREN IDENTIFIER COMMA IDENTIFIER COLON IDENTIFIER RPAREN COLON IDENTIFIER SEMI_COLON *)
begin	 (*  RESERVED_BEGIN *)
    if u mod v <> 0 then	 (*  RESERVED_IF IDENTIFIER RESERVED_MOD IDENTIFIER NE B10_NUMBER RESERVED_THEN *)
        gcd_recursive := gcd_recursive(v, u mod v)	 (*  IDENTIFIER ASSIGNMENT IDENTIFIER LPAREN IDENTIFIER COMMA IDENTIFIER RESERVED_MOD IDENTIFIER RPAREN *)
    else	 (*  RESERVED_ELSE *)
        gcd_recursive := v;	 (*  IDENTIFIER ASSIGNMENT IDENTIFIER SEMI_COLON *)
end;	 (*  RESERVED_END SEMI_COLON *)
 	 (*  *)
begin	 (*  RESERVED_BEGIN *)
	readln(t);	 (*  IDENTIFIER LPAREN IDENTIFIER RPAREN SEMI_COLON *)
		 (*  *)
	while (t > 0) do	 (*  RESERVED_WHILE LPAREN IDENTIFIER GT B10_NUMBER RPAREN RESERVED_DO *)
	begin	 (*  RESERVED_BEGIN *)
		readln(n, q);	 (*  IDENTIFIER LPAREN IDENTIFIER COMMA IDENTIFIER RPAREN SEMI_COLON *)
			 (*  *)
		setlength(a, n);	 (*  IDENTIFIER LPAREN IDENTIFIER COMMA IDENTIFIER RPAREN SEMI_COLON *)
		setlength(b, n);	 (*  IDENTIFIER LPAREN IDENTIFIER COMMA IDENTIFIER RPAREN SEMI_COLON *)
		setlength(c, n);	 (*  IDENTIFIER LPAREN IDENTIFIER COMMA IDENTIFIER RPAREN SEMI_COLON *)
			 (*  *)
		for i := 1 to n do	 (*  RESERVED_FOR IDENTIFIER ASSIGNMENT B10_NUMBER RESERVED_TO IDENTIFIER RESERVED_DO *)
		begin	 (*  RESERVED_BEGIN *)
			read(a[i]);	 (*  MODIFIER_READ LPAREN IDENTIFIER L_SQUARE_BRACKET IDENTIFIER R_SQUARE_BRACKET RPAREN SEMI_COLON *)
				 (*  *)
			b[i] := 0;	 (*  IDENTIFIER L_SQUARE_BRACKET IDENTIFIER R_SQUARE_BRACKET ASSIGNMENT B10_NUMBER SEMI_COLON *)
			c[i] := 0;	 (*  IDENTIFIER L_SQUARE_BRACKET IDENTIFIER R_SQUARE_BRACKET ASSIGNMENT B10_NUMBER SEMI_COLON *)
		end;	 (*  RESERVED_END SEMI_COLON *)
			 (*  *)
		b[1] := a[1];	 (*  IDENTIFIER L_SQUARE_BRACKET B10_NUMBER R_SQUARE_BRACKET ASSIGNMENT IDENTIFIER L_SQUARE_BRACKET B10_NUMBER R_SQUARE_BRACKET SEMI_COLON *)
		c[n] := a[n];	 (*  IDENTIFIER L_SQUARE_BRACKET IDENTIFIER R_SQUARE_BRACKET ASSIGNMENT IDENTIFIER L_SQUARE_BRACKET IDENTIFIER R_SQUARE_BRACKET SEMI_COLON *)
			 (*  *)
		g := a[1];	 (*  IDENTIFIER ASSIGNMENT IDENTIFIER L_SQUARE_BRACKET B10_NUMBER R_SQUARE_BRACKET SEMI_COLON *)
			 (*  *)
		for i := 2 to n do	 (*  RESERVED_FOR IDENTIFIER ASSIGNMENT B10_NUMBER RESERVED_TO IDENTIFIER RESERVED_DO *)
		begin	 (*  RESERVED_BEGIN *)
			g := gcd_recursive(g, a[i]);	 (*  IDENTIFIER ASSIGNMENT IDENTIFIER LPAREN IDENTIFIER COMMA IDENTIFIER L_SQUARE_BRACKET IDENTIFIER R_SQUARE_BRACKET RPAREN SEMI_COLON *)
			b[i] := g;	 (*  IDENTIFIER L_SQUARE_BRACKET IDENTIFIER R_SQUARE_BRACKET ASSIGNMENT IDENTIFIER SEMI_COLON *)
		end;	 (*  RESERVED_END SEMI_COLON *)
			 (*  *)
		g := a[n];	 (*  IDENTIFIER ASSIGNMENT IDENTIFIER L_SQUARE_BRACKET IDENTIFIER R_SQUARE_BRACKET SEMI_COLON *)
			 (*  *)
		for i := n - 1 downto 1 do	 (*  RESERVED_FOR IDENTIFIER ASSIGNMENT IDENTIFIER MINUS B10_NUMBER RESERVED_DOWNTO B10_NUMBER RESERVED_DO *)
		begin	 (*  RESERVED_BEGIN *)
			g := gcd_recursive(g, a[i]);	 (*  IDENTIFIER ASSIGNMENT IDENTIFIER LPAREN IDENTIFIER COMMA IDENTIFIER L_SQUARE_BRACKET IDENTIFIER R_SQUARE_BRACKET RPAREN SEMI_COLON *)
			c[i] := g;	 (*  IDENTIFIER L_SQUARE_BRACKET IDENTIFIER R_SQUARE_BRACKET ASSIGNMENT IDENTIFIER SEMI_COLON *)
		end;	 (*  RESERVED_END SEMI_COLON *)
			 (*  *)
		while (q > 0) do	 (*  RESERVED_WHILE LPAREN IDENTIFIER GT B10_NUMBER RPAREN RESERVED_DO *)
		begin	 (*  RESERVED_BEGIN *)
			readln(l, r);	 (*  IDENTIFIER LPAREN IDENTIFIER COMMA IDENTIFIER RPAREN SEMI_COLON *)
				 (*  *)
			if l <> 1 then 	 (*  RESERVED_IF IDENTIFIER NE B10_NUMBER RESERVED_THEN *)
				begin	 (*  RESERVED_BEGIN *)
					if r <> n then	 (*  RESERVED_IF IDENTIFIER NE IDENTIFIER RESERVED_THEN *)
						writeln(gcd_recursive(b[l - 1], c[r + 1]))	 (*  IDENTIFIER LPAREN IDENTIFIER LPAREN IDENTIFIER L_SQUARE_BRACKET IDENTIFIER MINUS B10_NUMBER R_SQUARE_BRACKET COMMA IDENTIFIER L_SQUARE_BRACKET IDENTIFIER PLUS B10_NUMBER R_SQUARE_BRACKET RPAREN RPAREN *)
					else	 (*  RESERVED_ELSE *)
						writeln(b[l - 1])	 (*  IDENTIFIER LPAREN IDENTIFIER L_SQUARE_BRACKET IDENTIFIER MINUS B10_NUMBER R_SQUARE_BRACKET RPAREN *)
				end	 (*  RESERVED_END *)
			else	 (*  RESERVED_ELSE *)
				writeln(c[r + 1]);	 (*  IDENTIFIER LPAREN IDENTIFIER L_SQUARE_BRACKET IDENTIFIER PLUS B10_NUMBER R_SQUARE_BRACKET RPAREN SEMI_COLON *)
				 (*  *)
			q := q - 1;	 (*  IDENTIFIER ASSIGNMENT IDENTIFIER MINUS B10_NUMBER SEMI_COLON *)
		end;	 (*  RESERVED_END SEMI_COLON *)
			 (*  *)
		t := t - 1;	 (*  IDENTIFIER ASSIGNMENT IDENTIFIER MINUS B10_NUMBER SEMI_COLON *)
	end;	 (*  RESERVED_END SEMI_COLON *)
end. 	 (*  RESERVED_END DOT *)
