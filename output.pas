 var	 (*  RESERVED_VAR *)

 t , n , q , l , r , g , i : longint ;	 (*  IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER COLON IDENTIFIER SEMI_COLON *)

 a , b , c : array of longint ;	 (*  IDENTIFIER COMMA IDENTIFIER COMMA IDENTIFIER COLON RESERVED_ARRAY RESERVED_OF IDENTIFIER SEMI_COLON *)

 t = 2.3e4	 (*  IDENTIFIER ASSIGNMENT NUMBER *)

 t = 2e3	 (*  IDENTIFIER ASSIGNMENT NUMBER *)

 t = 2.0	 (*  IDENTIFIER ASSIGNMENT NUMBER *)

 t = 2344	 (*  IDENTIFIER ASSIGNMENT NUMBER *)

 t = 1e4	 (*  IDENTIFIER ASSIGNMENT NUMBER *)

 begin	 (*  RESERVED_BEGIN *)

 while ( t > 0 ) do	 (*  RESERVED_WHILE LPAREN IDENTIFIER GT NUMBER RPAREN RESERVED_DO *)

 begin	 (*  RESERVED_BEGIN *)

 for i : = 1 to n do	 (*  RESERVED_FOR IDENTIFIER COLON ASSIGNMENT NUMBER RESERVED_TO IDENTIFIER RESERVED_DO *)

 begin	 (*  RESERVED_BEGIN *)

 read ( a [ i ] ) ;	 (*  MODIFIER_READ LPAREN IDENTIFIER L_SQUARE_BRACKET IDENTIFIER R_SQUARE_BRACKET RPAREN SEMI_COLON *)

	 (*  *)

 b [ i ] : = 0 ;	 (*  IDENTIFIER L_SQUARE_BRACKET IDENTIFIER R_SQUARE_BRACKET COLON ASSIGNMENT NUMBER SEMI_COLON *)

 c [ i ] : = 0 ;	 (*  IDENTIFIER L_SQUARE_BRACKET IDENTIFIER R_SQUARE_BRACKET COLON ASSIGNMENT NUMBER SEMI_COLON *)

 end ;	 (*  RESERVED_END SEMI_COLON *)

	 (*  *)

 b [ 1 ] : = a [ 1 ] ;	 (*  IDENTIFIER L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET COLON ASSIGNMENT IDENTIFIER L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET SEMI_COLON *)

 c [ n ] : = a [ n ] ;	 (*  IDENTIFIER L_SQUARE_BRACKET IDENTIFIER R_SQUARE_BRACKET COLON ASSIGNMENT IDENTIFIER L_SQUARE_BRACKET IDENTIFIER R_SQUARE_BRACKET SEMI_COLON *)

	 (*  *)

 g : = a [ 1 ] ;	 (*  IDENTIFIER COLON ASSIGNMENT IDENTIFIER L_SQUARE_BRACKET NUMBER R_SQUARE_BRACKET SEMI_COLON *)

	 (*  *)

 for i : = 2 to n do	 (*  RESERVED_FOR IDENTIFIER COLON ASSIGNMENT NUMBER RESERVED_TO IDENTIFIER RESERVED_DO *)

 begin	 (*  RESERVED_BEGIN *)

 g : = gcd_recursive ( g , a [ i ] ) ;	 (*  IDENTIFIER COLON ASSIGNMENT IDENTIFIER LPAREN IDENTIFIER COMMA IDENTIFIER L_SQUARE_BRACKET IDENTIFIER R_SQUARE_BRACKET RPAREN SEMI_COLON *)

 b [ i ] : = g ;	 (*  IDENTIFIER L_SQUARE_BRACKET IDENTIFIER R_SQUARE_BRACKET COLON ASSIGNMENT IDENTIFIER SEMI_COLON *)

 end ;	 (*  RESERVED_END SEMI_COLON *)

	 (*  *)

 g : = a [ n ] ;	 (*  IDENTIFIER COLON ASSIGNMENT IDENTIFIER L_SQUARE_BRACKET IDENTIFIER R_SQUARE_BRACKET SEMI_COLON *)

	 (*  *)

 for i : = n - 1 downto 1 do	 (*  RESERVED_FOR IDENTIFIER COLON ASSIGNMENT IDENTIFIER MINUS NUMBER RESERVED_DOWNTO NUMBER RESERVED_DO *)

 begin	 (*  RESERVED_BEGIN *)

 g : = gcd_recursive ( g , a [ i ] ) ;	 (*  IDENTIFIER COLON ASSIGNMENT IDENTIFIER LPAREN IDENTIFIER COMMA IDENTIFIER L_SQUARE_BRACKET IDENTIFIER R_SQUARE_BRACKET RPAREN SEMI_COLON *)

 c [ i ] : = g ;	 (*  IDENTIFIER L_SQUARE_BRACKET IDENTIFIER R_SQUARE_BRACKET COLON ASSIGNMENT IDENTIFIER SEMI_COLON *)

 end ;	 (*  RESERVED_END SEMI_COLON *)

	 (*  *)

 while ( q > 0 ) do	 (*  RESERVED_WHILE LPAREN IDENTIFIER GT NUMBER RPAREN RESERVED_DO *)

 begin	 (*  RESERVED_BEGIN *)

 readln ( l , r ) ;	 (*  IDENTIFIER LPAREN IDENTIFIER COMMA IDENTIFIER RPAREN SEMI_COLON *)

	 (*  *)

 if l <> 1 then	 (*  RESERVED_IF IDENTIFIER NE NUMBER RESERVED_THEN *)

 begin	 (*  RESERVED_BEGIN *)

 if r <> n then	 (*  RESERVED_IF IDENTIFIER NE IDENTIFIER RESERVED_THEN *)

 writeln ( gcd_recursive ( b [ l - 1 ] , c [ r + 1 ] ) )	 (*  IDENTIFIER LPAREN IDENTIFIER LPAREN IDENTIFIER L_SQUARE_BRACKET IDENTIFIER MINUS NUMBER R_SQUARE_BRACKET COMMA IDENTIFIER L_SQUARE_BRACKET IDENTIFIER PLUS NUMBER R_SQUARE_BRACKET RPAREN RPAREN *)

 else	 (*  RESERVED_ELSE *)

 writeln ( b [ l - 1 ] )	 (*  IDENTIFIER LPAREN IDENTIFIER L_SQUARE_BRACKET IDENTIFIER MINUS NUMBER R_SQUARE_BRACKET RPAREN *)

 end	 (*  RESERVED_END *)

 else	 (*  RESERVED_ELSE *)

 writeln ( c [ r + 1 ] ) ;	 (*  IDENTIFIER LPAREN IDENTIFIER L_SQUARE_BRACKET IDENTIFIER PLUS NUMBER R_SQUARE_BRACKET RPAREN SEMI_COLON *)

	 (*  *)

 q : = q - 1 ;	 (*  IDENTIFIER COLON ASSIGNMENT IDENTIFIER MINUS NUMBER SEMI_COLON *)

 end ;	 (*  RESERVED_END SEMI_COLON *)

	 (*  *)

 t : = t - 1 ;	 (*  IDENTIFIER COLON ASSIGNMENT IDENTIFIER MINUS NUMBER SEMI_COLON *)

 end ;	 (*  RESERVED_END SEMI_COLON *)

